/*
 *  This file is part of mal-gtk.
 *
 *  mal-gtk is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  mal-gtk is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with mal-gtk.  If not, see <http://www.gnu.org/licenses/>.
 */

_DEFS(malgtkmm,malgtk)

#include <glibmm.h>

namespace MALnew
{

class Date
{
  _CLASS_BOXEDTYPE(Date, MalgtkDate, malgtk_date_new, malgtk_date_copy, malgtk_date_free)

public:
#m4 _CONVERSION(`GDateDay',`Glib::Date::Day',`static_cast<Glib::Date::Day>($3)')
#m4 _CONVERSION(`GDateMonth',`Glib::Date::Month',`static_cast<Glib::Date::Month>($3)')
#m4 _CONVERSION(`GDateYear',`Glib::Date::Year',`static_cast<Glib::Date::Year>($3)')
#m4 _CONVERSION(`Glib::Date::Day',`GDateDay',`static_cast<GDateDay>($3)')
#m4 _CONVERSION(`Glib::Date::Month',`GDateMonth',`static_cast<GDateMonth>($3)')
#m4 _CONVERSION(`Glib::Date::Year',`GDateYear',`static_cast<GDateYear>($3)')
#m4 _CONVERSION(`const Date&',`const MalgtkDate*',`$3.gobj()')

  Date(const Glib::ustring& str);
  Date(const std::string& str);
  Date(const Glib::Date& date);
  Date(const char *cstr);

  _WRAP_METHOD(Glib::ustring get_season() const, malgtk_date_get_season)
  _WRAP_METHOD(void set(Glib::Date::Day day, Glib::Date::Month month, Glib::Date::Year year), malgtk_date_set_dmy)
  _WRAP_METHOD(void set(const std::string& str), malgtk_date_set_from_string)
  _WRAP_METHOD(void set(const Glib::ustring& str), malgtk_date_set_from_string)
  _WRAP_METHOD(Glib::ustring get_string() const, malgtk_date_get_string)
  _WRAP_METHOD(bool is_complete() const, malgtk_date_is_complete)
  _WRAP_METHOD(bool is_clear() const, malgtk_date_is_clear)
  _WRAP_METHOD(void clear(), malgtk_date_clear)
  _WRAP_METHOD(void is_equal(const Date& rhs) const, malgtk_date_is_equal)
  _WRAP_METHOD(int compare(const Date& rhs) const, malgtk_date_compare)

  _MEMBER_GET(day, day, Glib::Date::Day, GDateDay)
  _MEMBER_GET(month, month, Glib::Date::Month, GDateMonth)
  _MEMBER_GET(year, year, Glib::Date::Year, GDateYear)

  _MEMBER_SET(day, day, Glib::Date::Day, GDateDay)
  _MEMBER_SET(month, month, Glib::Date::Month, GDateMonth)
  _MEMBER_SET(year, year, Glib::Date::Year, GDateYear)

  _IGNORE(malgtk_date_get_day, malgtk_date_get_month, malgtk_date_get_year)
  _IGNORE(malgtk_date_get_g_date, malgtk_date_free, malgtk_date_copy)
  
  Glib::Date get_g_date() const;

  
};

/** @relates MALnew::Date */
inline bool operator==(const Date& lhs, const Date& rhs)
  { return (lhs.compare(rhs) == 0); }

/** @relates MALnew::Date */
inline bool operator!=(const Date& lhs, const Date& rhs)
  { return (lhs.compare(rhs) != 0); }

/** @relates MALnew::Date */
inline bool operator<(const Date& lhs, const Date& rhs)
  { return (lhs.compare(rhs) < 0); }

/** @relates MALnew::Date */
inline bool operator>(const Date& lhs, const Date& rhs)
  { return (lhs.compare(rhs) > 0); }

/** @relates MALnew::Date */
inline bool operator<=(const Date& lhs, const Date& rhs)
  { return (lhs.compare(rhs) <= 0); }

/** @relates MALnew::Date */
inline bool operator>=(const Date& lhs, const Date& rhs)
  { return (lhs.compare(rhs) >= 0); }

}